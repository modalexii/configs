#
# A bunch of the more common Apache mods, and a bit of the summary text from the apache docs. Useful for remembering why you have certain things enabled, or not.
#


# authn_file_module: 
# This module provides authentication front-ends such as mod_auth_digest and mod_auth_basic to authenticate users by looking up users in plain text password files. Similar functionality is provided by mod_authn_dbm. When using mod_auth_basic or mod_auth_digest, this module is invoked via the AuthBasicProvider or AuthDigestProvider with the file value.

LoadModule authn_file_module libexec/apache24/mod_authn_file.so

# authn_dbm_module: 
# This module provides authentication front-ends such as mod_auth_digest and mod_auth_basic to authenticate users by looking up users in dbm password files. Similar functionality is provided by mod_authn_file. When using mod_auth_basic or mod_auth_digest, this module is invoked via the AuthBasicProvider or AuthDigestProvider with the dbm value.

#LoadModule authn_dbm_module libexec/apache24/mod_authn_dbm.so

# authn_anon_module: 
# This module provides authentication front-ends such as mod_auth_basic to authenticate users similar to anonymous-ftp sites, i.e. have a 'magic' user id 'anonymous' and the email address as a password. These email addresses can be logged. Combined with other (database) access control methods, this allows for effective user tracking and customization according to a user profile while still keeping the site open for 'unregistered' users.

#LoadModule authn_anon_module libexec/apache24/mod_authn_anon.so

# authn_dbd_module: 
# This module provides authentication front-ends such as mod_auth_digest and mod_auth_basic to authenticate users by looking up users in SQL tables. Similar functionality is provided by, for example, mod_authn_file. This module relies on mod_dbd to specify the backend database driver and connection parameters, and manage the database connections.

#LoadModule authn_dbd_module libexec/apache24/mod_authn_dbd.so

# authn_socache_module: 
E Maintains a cache of authentication credentials, so that a new backend lookup is not required for every authenticated request.

#LoadModule authn_socache_module libexec/apache24/mod_authn_socache.so

# authn_core_module: 
# This module provides core authentication capabilities to allow or deny access to portions of the web site. mod_authn_core provides directives that are common to all authentication providers.

LoadModule authn_core_module libexec/apache24/mod_authn_core.so

# authz_host_module: 
# The directives provided by mod_authz_host are used in <Directory>, <Files>, and <Location> sections as well as .htaccess files to control access to particular parts of the server. Access can be controlled based on the client hostname, IP address, or other characteristics of the client request, as captured in environment variables. The Allow and Deny directives are used to specify which clients are or are not allowed access to the server, while the Order directive sets the default access state, and configures how the Allow and Deny directives interact with each other.

LoadModule authz_host_module libexec/apache24/mod_authz_host.so

# authz_groupfile_module: 
# This module provides authorization capabilities so that authenticated users can be allowed or denied access to portions of the web site by group membership. Similar functionality is provided by mod_authz_dbm.

#LoadModule authz_groupfile_module libexec/apache24/mod_authz_groupfile.so

# authz_user_module: 
# This module provides authorization capabilities so that authenticated users can be allowed or denied access to portions of the web site. mod_authz_user grants access if the authenticated user is listed in a Require user directive. Alternatively Require valid-user can be used to grant access to all successfully authenticated users.

LoadModule authz_user_module libexec/apache24/mod_authz_user.so

# authz_dbm_module: 
# This module provides authorization capabilities so that authenticated users can be allowed or denied access to portions of the web site by group membership. Similar functionality is provided by mod_authz_groupfile.

#LoadModule authz_dbm_module libexec/apache24/mod_authz_dbm.so

# authz_owner_module: 
# This module authorizes access to files by comparing the userid used for HTTP authentication (the web userid) with the file-system owner or group of the requested file. The supplied username and password must be already properly verified by an authentication module, such as mod_auth_basic or mod_auth_digest. 

#LoadModule authz_owner_module libexec/apache24/mod_authz_owner.so

# authz_dbd_module: 
# This module provides authorization capabilities so that authenticated users can be allowed or denied access to portions of the web site by group membership. Similar functionality is provided by mod_authz_groupfile and mod_authz_dbm, with the exception that this module queries a SQL database to determine whether a user is a member of a group.

#LoadModule authz_dbd_module libexec/apache24/mod_authz_dbd.so

# authz_core_module: 
# This module provides core authorization capabilities so that authenticated users can be allowed or denied access to portions of the web site. mod_authz_core provides the functionality to register various authorization providers. It is usually used in conjunction with an authentication provider module such as mod_authn_file and an authorization module such as mod_authz_user.

LoadModule authz_core_module libexec/apache24/mod_authz_core.so

# access_compat_module: 
# The directives provided by mod_access_compat are used in <Directory>, <Files>, and <Location> sections as well as .htaccess files to control access to particular parts of the server. Access can be controlled based on the client hostname, IP address, or other characteristics of the client request, as captured in environment variables. The Allow and Deny directives are used to specify which clients are or are not allowed access to the server, while the Order directive sets the default access state, and configures how the Allow and Deny directives interact with each other.

LoadModule access_compat_module libexec/apache24/mod_access_compat.so

# auth_basic_module: 
# This module allows the use of HTTP Basic Authentication to restrict access by looking up users in the given providers. HTTP Digest Authentication is provided by mod_auth_digest. This module should usually be combined with at least one authentication module such as mod_authn_file and one authorization module such as mod_authz_user.

LoadModule auth_basic_module libexec/apache24/mod_auth_basic.so

# auth_form_module: 
# This module allows the use of an HTML login form to restrict access by looking up users in the given providers. HTML forms require significantly more configuration than the alternatives, however an HTML login form can provide a much friendlier experience for end users. Form authentication depends on the mod_session modules, and these modules make use of HTTP cookies. 

#LoadModule auth_form_module libexec/apache24/mod_auth_form.so

# auth_digest_module: 
# This module implements HTTP Digest Authentication (RFC2617), and provides an alternative to mod_auth_basic where the password is not transmitted as cleartext. However, this does not lead to a significant security advantage over basic authentication. On the other hand, the password storage on the server is much less secure with digest authentication than with basic authentication. Therefore, using basic auth and encrypting the whole connection using mod_ssl is a much better alternative.

#LoadModule auth_digest_module libexec/apache24/mod_auth_digest.so

# allowmethods_module: 
# This module makes it easy to restrict what HTTP methods can used on an server. The most common configuration would be:
# <Location />
#   AllowMethods GET POST OPTIONS
# </Location>

#LoadModule allowmethods_module libexec/apache24/mod_allowmethods.so

# file_cache_module:
# Through configuration directives, you can direct mod_file_cache to either open then mmap() a file, or to pre-open a file and save the file's open file handle. Both techniques reduce server load when processing requests for these files by doing part of the work (specifically, the file I/O) for serving the file when the server is started rather than during each request.

# file_cache_module:
# Through configuration directives, you can direct mod_file_cache to either open then mmap() a file, or to pre-open a file and save the file's open file handle. Both techniques reduce server load when processing requests for these files by doing part of the work (specifically, the file I/O) for serving the file when the server is started rather than during each request.

#LoadModule file_cache_module libexec/apache24/mod_file_cache.so

# mod_cache:
# mod_cache implements an RFC 2616 compliant HTTP content cache that can be used to cache either local or proxied content. mod_cache requires the services of one or more storage management modules. Two storage management modules are included in the base Apache distribution: mod_disk_cache & mod_mem_cache.

#LoadModule cache_module libexec/apache24/mod_cache.so

# cache_disk_module:
# mod_cache_disk implements a disk based storage manager for mod_cache. The headers and bodies of cached responses are stored separately on disk, in a directory structure derived from the md5 hash of the cached URL.

#LoadModule cache_disk_module libexec/apache24/mod_cache_disk.so

# cache_socache_module:
# mod_cache_socache implements a shared object cache (socache) based storage manager for mod_cache. The headers and bodies of cached responses are combined, and stored underneath a single key in the shared object cache. A number of implementations of shared object caches are available to choose from.

#LoadModule cache_socache_module libexec/apache24/mod_cache_socache.so

# socache_shmcb_module:
# mod_socache_shmcb is a shared object cache provider which provides for creation and access to a cache backed by a high-performance cyclic buffer inside a shared memory segment. e.g., shmcb:/path/to/datafile(512000)

#LoadModule socache_shmcb_module libexec/apache24/mod_socache_shmcb.so

# socache_dbm_module:
# mod_socache_dbm is a shared object cache provider which provides for creation and access to a cache backed by a DBM database. e.g., dbm:/path/to/datafile

#LoadModule socache_dbm_module libexec/apache24/mod_socache_dbm.so

# socache_memcache_module:
# mod_socache_memcache is a shared object cache provider which provides for creation and access to a cache backed by the memcached high-performance, distributed memory object caching system. e.g., SSLSessionCache memcache:memcache.example.com:12345,memcache2.example.com:12345

#LoadModule socache_memcache_module libexec/apache24/mod_socache_memcache.so

# macro_module:
# Provides macros within Apache httpd runtime configuration files, to ease the process of creating numerous similar configuration blocks. When the server starts up, the macros are expanded using the provided parameters, and the result is processed as along with the rest of the configuration file.
#e.g.,
# Use VHost example example.com
# <Macro VHost $name $domain>
# <VirtualHost *:80>
#	ServerName $domain
#	DocumentRoot /var/www/vhosts/$name
#	...


#LoadModule macro_module libexec/apache24/mod_macro.so

# dbd_module:
# mod_dbd manages SQL database connections using APR. It provides database connections on request to modules requiring SQL database functions, and takes care of managing databases with optimal efficiency and scalability for both threaded and non-threaded MPMs.

#LoadModule dbd_module libexec/apache24/m3od_dbd.so

# dumpio_module:
#mod_dumpio allows for the logging of all input received by Apache and/or all output sent by Apache to be logged (dumped) to the error.log file. The data logging is done right after SSL decoding (for input) and right before SSL encoding (for output). As can be expected, this can produce extreme volumes of data, and should only be used when debugging problems.

#LoadModule dumpio_module libexec/apache24/mod_dumpio.so

# buffer_module:
# This module provides the ability to buffer the input and output filter stacks. Under certain circumstances, content generators might create content in small chunks. In order to promote memory reuse, in memory chunks are always 8k in size, regardless of the size of the chunk itself. When many small chunks are generated by a request, this can create a large memory footprint while the request is being processed, and an unnecessarily large amount of data on the wire. The addition of a buffer collapses the response into the fewest chunks possible.

#LoadModule buffer_module libexec/apache24/mod_buffer.so

# ratelimit_module:
# Provides a filter named RATE_LIMIT to limit client bandwidth. The connection speed to be simulated is specified, in KiB/s, using the environment variable rate-limit. e.g.,
# <Location /downloads>
#	SetOutputFilter RATE_LIMIT
#	SetEnv rate-limit 400 
# </Location>

#LoadModule ratelimit_module libexec/apache24/mod_ratelimit.so

# reqtimeout_module:
# Set timeout and minimum data rate for receiving requests, e.g.,
# RequestReadTimeout header=10 body=30

#LoadModule reqtimeout_module libexec/apache24/mod_reqtimeout.so

# ext_filter_module:
# mod_ext_filter presents a simple and familiar programming model for filters. With this module, a program which reads from stdin and writes to stdout (i.e., a Unix-style filter command) can be a filter for Apache.

#LoadModule ext_filter_module libexec/apache24/mod_ext_filter.so

# request_module:
# Keep the request body instead of discarding it up to the specified maximum size, for potential use by filters such as mod_include.

#LoadModule request_module libexec/apache24/mod_request.so

# include_module:
# This module provides a filter which will process files before they are sent to the client. The processing is controlled by specially formatted SGML comments, referred to as elements. These elements allow conditional text, the inclusion of other files or programs, as well as the setting and printing of environment variables, e.g.,
# AddOutputFilter INCLUDES .shtml
# Options +Includes

#LoadModule include_module libexec/apache24/mod_include.so

# filter_module:
# This module enables smart, context-sensitive configuration of output content filters. For example, apache can be configured to process different content-types through different filters, even when the content-type is not known in advance (e.g. in a proxy).

LoadModule filter_module libexec/apache24/mod_filter.so

# substitute_module:
# mod_substitute provides a mechanism to perform both regular expression and fixed string substitutions on response bodies.

#LoadModule substitute_module libexec/apache24/mod_substitute.so

# sed_module:
# mod_sed is an in-process content filter. The mod_sed filter implements the sed editing commands implemented by the Solaris 10 sed program as described in the manual page. However, unlike sed, mod_sed doesn't take data from standard input. Instead, the filter acts on the entity data sent between client and server. mod_sed can be used as an input or output filter. mod_sed is a content filter, which means that it cannot be used to modify client or server http headers.

#LoadModule sed_module libexec/apache24/mod_sed.so

# deflate_module:
# The mod_deflate module provides the DEFLATE output filter that allows output from your server to be compressed before being sent to the client over the network.

#LoadModule deflate_module libexec/apache24/mod_deflate.so

# mime_module:
# This module is used to assign content metadata to the content selected for an HTTP response by mapping patterns in the URI or filenames to the metadata values. For example, the filename extensions of content files often define the content's Internet media type, language, character set, and content-encoding. This information is sent in HTTP messages containing that content and used in content negotiation when selecting alternatives, such that the user's preferences are respected when choosing one of several possible contents to serve. See mod_negotiation for more information about content negotiation. The directives AddCharset, AddEncoding, AddLanguage and AddType are all used to map file extensions onto the metadata for that file.

LoadModule mime_module libexec/apache24/mod_mime.so

# log_config_module:
# This module provides for flexible logging of client requests. Logs are written in a customizable format, and may be written directly to a file, or to an external program. Conditional logging is provided so that individual requests may be included or excluded from the logs based on characteristics of the request. Three directives are provided by this module: TransferLog to create a log file, LogFormat to set a custom format, and CustomLog to define a log file and format in one step. 

LoadModule log_config_module libexec/apache24/mod_log_config.so

# log_debug_module:
# Additional configurable debug logging

#LoadModule log_debug_module libexec/apache24/mod_log_debug.so

# logio_module:
# This module provides the logging of input and output number of bytes received/sent per request. The numbers reflect the actual bytes as received on the network, which then takes into account the headers and bodies of requests and responses. The counting is done before SSL/TLS on input and after SSL/TLS on output, so the numbers will correctly reflect any changes made by encryption. This module requires mod_log_config.

#LoadModule logio_module libexec/apache24/mod_logio.so

# env_module:
# his module allows for control of internal environment variables that are used by various Apache HTTP Server modules. These variables are also provided to CGI scripts as native system environment variables, and available for use in SSI pages. 

LoadModule env_module libexec/apache24/mod_env.so

# mime_magic_module:
# This module determines the MIME type of files in the same way the Unix file(1) command works: it looks at the first few bytes of the file. It is intended as a "second line of defense" for cases that mod_mime can't resolve.

#LoadModule mime_magic_module libexec/apache24/mod_mime_magic.so

# This module controls the setting of the Expires HTTP header and the max-age directive of the Cache-Control HTTP header in server responses. The expiration date can set to be relative to either the time the source file was last modified, or to the time of the client access. These HTTP headers are an instruction to the client about the document's validity and persistence. 

#LoadModule expires_module libexec/apache24/mod_expires.so

# headers_module:
# This module provides directives to control and modify HTTP request and response headers. Headers can be merged, replaced or removed.

LoadModule headers_module libexec/apache24/mod_headers.so

# unique_id_module: 
# This module provides a magic token for each request which is guaranteed to be unique across "all" requests under very specific conditions. The unique identifier is even unique across multiple machines in a properly configured cluster of machines. The environment variable UNIQUE_ID is set to the identifier for each request. 

#LoadModule unique_id_module libexec/apache24/mod_unique_id.so

# setenvif_module:
# The mod_setenvif module allows you to set internal environment variables according to whether different aspects of the request match regular expressions you specify. These environment variables can be used by other parts of the server to make decisions about actions to be taken, as well as becoming available to CGI scripts and SSI pages

# LoadModule setenvif_module libexec/apache24/mod_setenvif.so

# version_module:
# This module is designed for the use in test suites and large networks which have to deal with different httpd versions and different configurations. It provides a new container -- <IfVersion>, which allows a flexible version checking including numeric comparisons and regular expressions.

# LoadModule version_module libexec/apache24/mod_version.so

# remoteip_module:
# This module is used to treat the useragent which initiated the request as the originating useragent as identified by httpd for the purposes of authorization and logging, even where that useragent is behind a load balancer, front end server, or proxy server. The module overrides the client IP address for the connection with the useragent IP address reported in the request header configured with the RemoteIPHeader directive. Once replaced as instructed, this overridden useragent IP address is then used for the mod_authz_host Require ip feature, is reported by mod_status, and is recorded by mod_log_config %a and core %a format strings. The underlying client IP of the connection is available in the %{c}a format string.

#LoadModule remoteip_module libexec/apache24/mod_remoteip.so

# proxy_module:
# This module implements a proxy/gateway for Apache. It implements proxying capability for AJP13 (Apache JServe Protocol version 1.3), FTP, CONNECT (for SSL), HTTP/0.9, HTTP/1.0, and HTTP/1.1. 

#LoadModule proxy_module libexec/apache24/mod_proxy.so

# proxy_connect_module
# This module requires the service of mod_proxy. It provides support for the CONNECT HTTP method. This method is mainly used to tunnel SSL requests through proxy servers.

#LoadModule proxy_connect_module libexec/apache24/mod_proxy_connect.so

# proxy_ftp_module:
# This module requires the service of mod_proxy. It provides support for the proxying FTP sites. Note that FTP support is currently limited to the GET method.

#LoadModule proxy_ftp_module libexec/apache24/mod_proxy_ftp.so

# proxy_http_module:
# This module requires the service of mod_proxy. It provides the features used for proxying HTTP and HTTPS requests. mod_proxy_http supports HTTP/0.9, HTTP/1.0 and HTTP/1.1. It does not provide any caching abilities.

#LoadModule proxy_http_module libexec/apache24/mod_proxy_http.so

# proxy_fcgi_module:
# This module requires the service of mod_proxy. It provides support for the FastCGI protocol.

#LoadModule proxy_fcgi_module libexec/apache24/mod_proxy_fcgi.so

# proxy_scgi_module:
# This module requires the service of mod_proxy. It provides support for the SCGI protocol, version 1.

#LoadModule proxy_scgi_module libexec/apache24/mod_proxy_scgi.so

# proxy_wstunnel_module:
#This module requires the service of mod_proxy. It provides support for the tunnelling of web socket connections to a backend websockets server. The connection is automagically upgraded to a websocket connection

#LoadModule proxy_wstunnel_module libexec/apache24/mod_proxy_wstunnel.so

# proxy_ajp_module:
# This module requires the service of mod_proxy. It provides support for the Apache JServ Protocol version 1.3

#LoadModule proxy_ajp_module libexec/apache24/mod_proxy_ajp.so

# proxy_balancer_module:
# This module requires the service of mod_proxy. It provides load balancing support for HTTP, FTP and AJP13 protocols

#LoadModule proxy_balancer_module libexec/apache24/mod_proxy_balancer.so

# proxy_express_module
# This module creates dynamically configured mass reverse proxies, by mapping the Host: header of the HTTP request to a server name and backend URL stored in a DBM file. This allows for easy use of a huge number of reverse proxies with no configuration changes. It is much less feature-full than mod_proxy_balancer, which also provides dynamic growth, but is intended to handle much, much larger numbers of backends. It is ideally suited as a front-end HTTP switch.

#LoadModule proxy_express_module libexec/apache24/mod_proxy_express.so

# session_module:
# This module provides support for a server wide per user session interface. Sessions can be used for keeping track of whether a user has been logged in, or for other per user information that should be kept available across requests.

#LoadModule session_module libexec/apache24/mod_session.so

# session_cookie_module:
# This submodule of mod_session provides support for the storage of user sessions on the remote browser within HTTP cookies.

#LoadModule session_cookie_module libexec/apache24/mod_session_cookie.so

# session_crypto_module:
# This submodule of mod_session provides support for the encryption of user sessions before being written to a local database, or written to a remote browser via an HTTP cookie.

#LoadModule session_crypto_module libexec/apache24/mod_session_crypto.so


# session_dbd_module:
# This submodule of mod_session provides support for the storage of user sessions within a SQL database using the mod_dbd module

#LoadModule session_dbd_module libexec/apache24/mod_session_dbd.so

# slotmem_shm_module:
# mod_slotmem_shm is a memory provider which provides for creation and access to a shared memory segment in which the datasets are organized in "slots."

#LoadModule slotmem_shm_module libexec/apache24/mod_slotmem_shm.so

# ssl_module
# This module provides SSL v2/v3 and TLS v1 support for the Apache HTTP Server. This module relies on OpenSSL to provide the cryptography engine.

#LoadModule ssl_module libexec/apache24/mod_ssl.so

# lbmethod_byrequests_module:
# This module does not provide any configuration directives of its own. It requires the services of mod_proxy_balancer, and provides the byrequests load balancing method.

#LoadModule lbmethod_byrequests_module libexec/apache24/mod_lbmethod_byrequests.so

# lbmethod_bytraffic_module:
# This module does not provide any configuration directives of its own. It requires the services of mod_proxy_balancer, and provides the bytraffic load balancing method..

#LoadModule lbmethod_bytraffic_module libexec/apache24/mod_lbmethod_bytraffic.so
# This module does not provide any configuration directives of its own. It requires the services of mod_proxy_balancer, and provides the bybusyness load balancing method.

#LoadModule lbmethod_bybusyness_module libexec/apache24/mod_lbmethod_bybusyness.so

# unixd_module:
# This directive tells the server to chroot(8) to the specified directory after startup, but before accepting requests over the 'net.

# LoadModule unixd_module libexec/apache24/mod_unixd.so

# dav_module:
# This module provides class 1 and class 2 WebDAV ('Web-based Distributed Authoring and Versioning') functionality for Apache. This extension to the HTTP protocol allows creating, moving, copying, and deleting resources and collections on a remote web server.

#LoadModule dav_module libexec/apache24/mod_dav.so

# status_module:
# The Status module allows a server administrator to find out how well their server is performing. A HTML page is presented that gives the current server statistics in an easily readable form. Access server statistics by using a Web browser to access the page http://your.server.name/server-status

LoadModule status_module libexec/apache24/mod_status.so

# autoindex_module
# Generates directory indexes, automatically, similar to the Unix ls command or the Win32 dir shell command

#LoadModule autoindex_module libexec/apache24/mod_autoindex.so

# asis_module:
# This module provides the handler send-as-is which causes Apache to send the document without adding most of the usual HTTP headers. This can be used to send any kind of data from the server, including redirects and other special HTTP responses, without requiring a cgi-script or an nph script.

#LoadModule asis_module libexec/apache24/mod_asis.so

# info_module:
# Provides a comprehensive overview of the server configuration. Once configured, the server information is obtained by accessing http://your.host.example.com/server-info

#LoadModule info_module libexec/apache24/mod_info.so

# cgi_module:
# Any file that has the handler cgi-script will be treated as a CGI script, and run by the server, with its output being returned to the client. Files acquire this handler either by having a name containing an extension defined by the AddHandler directive, or by being in a ScriptAlias directory.

#LoadModule cgi_module libexec/apache24/mod_cgi.so

# cgid_module:
# Except for the optimizations and the additional ScriptSock directive, mod_cgid behaves similarly to mod_cgi.

#LoadModule cgid_module libexec/apache24/mod_cgid.so

# dav_fs_module:
# This module requires the service of mod_dav. It acts as a support module for mod_dav and provides access to resources located in the server's file system.

#LoadModule dav_fs_module libexec/apache24/mod_dav_fs.so

# vhost_alias_module:
# This module creates dynamically configured virtual hosts, by allowing the IP address and/or the Host: header of the HTTP request to be used as part of the pathname to determine what files to serve. This allows for easy use of a huge number of virtual hosts with similar configurations.

#LoadModule vhost_alias_module libexec/apache24/mod_vhost_alias.so

# negotiation_module:
# Content negotiation, or more accurately content selection, is the selection of the document that best matches the clients capabilities, from one of several available documents. 

#LoadModule negotiation_module libexec/apache24/mod_negotiation.so

# dir_module:
# Provides for "trailing slash" redirects and serving directory index files. A "trailing slash" redirect is issued when the server receives a request for a URL http://servername/foo/dirname where dirname is a directory. Directories require a trailing slash, so mod_dir issues a redirect to http://servername/foo/dirname/.

# LoadModule dir_module libexec/apache24/mod_dir.so

# imagemap_module:
# This module processes .map files, thereby replacing the functionality of the imagemap CGI program. Any directory or document type configured to use the handler imap-file (using either AddHandler or SetHandler) will be processed by this module.

#LoadModule imagemap_module libexec/apache24/mod_imagemap.so

# actions_module:
# This module has two directives. The Action directive lets you run CGI scripts whenever a file of a certain MIME content type is requested. The Script directive lets you run CGI scripts whenever a particular method is used in a request. This makes it much easier to execute scripts that process files.

#LoadModule actions_module libexec/apache24/mod_actions.so

# speling_module:
# Requests to documents sometimes cannot be served by the core apache server because the request was misspelled or miscapitalized. This module addresses this problem by trying to find a matching document, even after all other modules gave up. It does its work by comparing each document name in the requested directory against the requested document name without regard to case, and allowing up to one misspelling (character insertion / omission / transposition or wrong character).

#LoadModule speling_module libexec/apache24/mod_speling.so

# userdir_module:
# This module allows user-specific directories to be accessed using the http://example.com/~user/ syntax.

#LoadModule userdir_module libexec/apache24/mod_userdir.so

# alias_module:
# The directives contained in this module allow for manipulation and control of URLs as requests arrive at the server. The Alias and ScriptAlias directives are used to map between URLs and filesystem paths. This allows for content which is not directly under the DocumentRoot served as part of the web document tree. The ScriptAlias directive has the additional effect of marking the target directory as containing only CGI scripts.

LoadModule alias_module libexec/apache24/mod_alias.so

# rewrite_module:
# The mod_rewrite module uses a rule-based rewriting engine, based on a PCRE regular-expression parser, to rewrite requested URLs on the fly. By default, mod_rewrite maps a URL to a filesystem path. However, it can also be used to redirect one URL to another URL, or to invoke an internal proxy fetch.

#LoadModule rewrite_module libexec/apache24/mod_rewrite.so

